<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <!-- 项目的名称, Maven产生的文档用 -->
  <name>sys Maven</name>
  
  <!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 -->
  <description>maven程序</description>
  
  <!-- 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
  <modelVersion>4.0.0</modelVersion>
  
  <!-- 项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app -->
  <groupId>17aba</groupId>
  
  <!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源码，二进制发布和WARs等。 -->
  <artifactId>sysmaven</artifactId>
  
  <!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
  <version>0.0.1-SNAPSHOT</version>
  
  <!-- 项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 -->
  <packaging>jar</packaging>
  
  <!-- 项目主页的URL, Maven产生的文档用 -->
  <url> http://www.baidu.com/</url>
  
  <properties>
	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	<spring.version>4.0.5.RELEASE</spring.version>
  </properties>
  
  <!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 -->
  <dependencies>
  
  	<!-- junit 测试用 -->
  	<dependency>
  		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<!-- 依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 -->
		<version>3.8.1</version>
		<!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在plugin里定义新的类型。所以前面的类型的例子不完整。 -->
		<type> jar </type>
		<!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。
		compile ：默认范围，用于编译
		provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath
		runtime: 在执行时需要使用
		test: 用于test任务时使用
		system: 需要外在提供相应的元素。通过systemPath来取得
		systemPath: 仅用于范围为system。提供相应的路径
		optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 -->
		<scope>test</scope>
		<!-- 仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。 -->
		<systemPath></systemPath> 
	</dependency>
    
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.4</version>
        <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>javax.servlet.jsp</groupId>
        <artifactId>javax.servlet.jsp-api</artifactId>
        <version>2.3.1</version>
        <scope>provided</scope>
    </dependency>
    <!-- 
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring</artifactId>
		<version>2.5.6</version>
	</dependency>
	 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
			<version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
        </dependency>
	
	<!-- 
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-jdbc</artifactId>
		<version>${spring.version}</version>
	</dependency>
  	-->
  	<dependency>
	    <groupId>org.freemarker</groupId>
	    <artifactId>freemarker</artifactId>
	    <version>2.3.20</version>
	</dependency>

    <dependency>
        <groupId>commons-fileupload</groupId>
        <artifactId>commons-fileupload</artifactId>
        <version>1.3.1</version>
    </dependency>
     
    <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>4.3.3</version>
    </dependency>
    
  	<dependency>
  		<groupId>mysql</groupId>
  		<artifactId>mysql-connector-java</artifactId>
  		<version>5.1.9</version>
  	</dependency>
  	
  	<dependency>
  		<groupId>commons-dbcp</groupId>
  		<artifactId>commons-dbcp</artifactId>
  		<version>1.4</version>
  	</dependency>
  	<dependency>
  		<groupId>commons-pool</groupId>
  		<artifactId>commons-pool</artifactId>
  		<version>1.4</version>
  	</dependency>

  	<dependency>
  		<groupId>jfree</groupId>
  		<artifactId>jfreechart</artifactId>
  		<version>1.0.13</version>
  	</dependency>
  	
	<dependency>
	  <groupId>com.google.code.gson</groupId>
	  <artifactId>gson</artifactId>
	  <version>2.3.1</version>
	</dependency>
	
  	<dependency>
  		<groupId>log4j</groupId>
  		<artifactId>log4j</artifactId>
		<version>1.2.12</version>
		<scope>compile</scope>
	</dependency>
  	
  </dependencies>
  
  
  
  <!-- ############ 编译 ################### -->
  <!-- 构建项目需要的信息 -->
  <build>
 	<!-- 
 	<pluginManagement>
 		<plugins>
 			<plugin>
 				<groupId>org.eclipse.m2e</groupId>
 				<artifactId>lifecycle-mapping</artifactId>
 				<version>1.0.0</version>
 				<configuration>
 					<lifecycleMappingMetadata>
 						<pluginExecutions>
 							<pluginExecution>
 								<pluginExecutionFilter>
 									<groupId>org.apache.maven.plugins</groupId>
 									<artifactId>maven-dependency-plugin</artifactId>
 									<versionRange>[2.0,)</versionRange>
 									<goals>
 										<goal>copy-dependencies</goal>
 										<goal>unpack</goal>
 									</goals>
 								</pluginExecutionFilter>
 								<action>
 									<ignore />
 								</action>
 							</pluginExecution>
 						</pluginExecutions>
 					</lifecycleMappingMetadata>
 				</configuration>
 			</plugin>
 		</plugins>
 	</pluginManagement>
 	-->
 	
 	<!-- 指定去掉后缀的工程名字，例如：默认为${artifactId}-${version}。 -->
  	<finalName>sysmaven</finalName>
  	
  	<!-- 默认的目标，必须跟命令行上的参数相同，如：jar:jar,或者与时期parse相同,例如install -->
  	<defaultGoal>jar</defaultGoal>
  	
  	<!-- 用于定义指定filter属性的位置，例如filter元素赋值filters/filter1.properties,那么这个文件里面就可以定义name=value对，这个name=value对的值就可以在工程pom中通过${name}引用，默认的filter目录是${basedir}/src/main/fiters/ -->
  	<filters></filters>
  	
  	<!-- ###################### -->
  	<!-- 该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->
  	<sourceDirectory>${basedir}/src/main/java</sourceDirectory>
	<!-- 该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 -->
	<scriptSourceDirectory>${basedir}/src/main/scripts</scriptSourceDirectory>
	
	<!-- 该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->
	<testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>
	
	<!-- 被编译过的应用程序class文件存放的目录。 -->
	<outputDirectory>${basedir}/target/classes</outputDirectory>
	
	<!-- 被编译过的测试class文件存放的目录。 -->
	<testOutputDirectory>${basedir}/target/classes/test-classes</testOutputDirectory>
	
	<!-- ###################### -->
	<!-- 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 -->
	<resources>
		<!-- 这个元素描述了项目相关或测试相关的所有资源路径 -->
		<resource>
		<!-- 描述存放资源的目录，该路径相对POM路径 -->
		<directory>${basedir}/src/main/resources</directory>
		<!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 -->
		<targetPath>${project.build.outputDirectory}</targetPath>
		
		<!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 -->
		<filtering>false</filtering>
		
		<!-- 包含的模式列表，例如**/*.xml. -->
		<includes>
			<include>**/*.xml</include>
			<include>**/*.properties</include>
		</includes>
		
		<!-- 排除的模式列表，例如**/*.xml -->
		<excludes />
		</resource>
	</resources> 
	
	<!-- 这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 -->
	<testResources/> 
	<!-- 构建产生的所有文件存放的目录 
	<directory>${basedir}/bin</directory>
	-->
	
  	<plugins>
  		<!-- 设置源文件编码方式 --> 
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-compiler-plugin</artifactId>
  			<version>2.0</version>
  			<configuration>
  				<defaultLibBundleDir>lib</defaultLibBundleDir>
				<source>1.6</source>
				<target>1.6</target>
				<encoding>UTF-8</encoding>
			</configuration>
  		</plugin>
  		
  		<!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖  -->
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-jar-plugin</artifactId>
  			<version>2.5</version>
  			<configuration>
  				<encoding>utf-8</encoding>
	  			<archive>
	  				<manifestFile>m2e-wtp/web-resources/META-INF/MANIFEST.MF</manifestFile>
	  				<manifest>
		            	<addClasspath>true</addClasspath>
		            	<classpathPrefix>lib/</classpathPrefix>
		                <mainClass>com.sys.applet.Main</mainClass>
		            </manifest>
	  			</archive>
  			</configuration>
  		</plugin>
  		
  		<!-- 拷贝依赖的jar包到lib目录 -->
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-dependency-plugin</artifactId>
  			<version>2.8</version>
  			<executions>
  				<execution>
  					<id>copy</id>
  					<phase>package</phase>
  					<goals>
  						<goal>copy-dependencies</goal>
  					</goals>
  					<configuration>
  						<outputDirectory>${basedir}/lib</outputDirectory>
  					</configuration>
  				</execution>
  			</executions>
  		</plugin>
  		
  		<!-- 解决资源文件的编码问题 -->
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-resources-plugin</artifactId>
  			<version>2.6</version>
  			<configuration>
  				<encoding>UTF-8</encoding>
  			</configuration>
  		</plugin> 
  		
  		<!-- 打包source文件为jar文件  
  		<plugin>
  			<artifactId>maven-source-plugin</artifactId>
  			<version>2.1</version>
  			<configuration>
	  			<attach>true</attach>
	  			<encoding>UTF-8</encoding>
  			</configuration>
  			<executions>
	  			<execution>
		  			<phase>compile</phase>
		  			<goals>
		  				<goal>jar</goal>
		  			</goals>
	  			</execution>
  			</executions>
  		</plugin>
  		-->
  		
  		<!-- 打全量jar包 包括依赖的jar包打到一块  -->
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-shade-plugin</artifactId>
  			<version>1.2.1</version>
  			<executions>
  				<execution>
  					<phase>package</phase>
  					<goals>
  						<goal>shade</goal>
  					</goals>
  					<configuration>
  						<transformers>
  							<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
  							<mainClass>com.sys.applet.Main</mainClass>
  							</transformer>
						</transformers>
  					</configuration>
  				</execution>
  			</executions>
  		</plugin>
        
  	</plugins>
  	
  </build>
  
  
</project>